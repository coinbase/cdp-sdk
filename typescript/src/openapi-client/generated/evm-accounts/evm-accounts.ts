/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import type {
  CreateEvmAccountBody,
  EvmAccount,
  ListEvmAccounts200,
  ListEvmAccountsParams,
  SignEvmHash200,
  SignEvmHashBody,
  SignEvmMessage200,
  SignEvmMessageBody,
  SignEvmTransaction200,
  SignEvmTransactionBody,
} from "../coinbaseDeveloperPlatformAPIs.schemas";

import { cdpApiClient } from "../../cdpApiClient";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Lists the EVM accounts belonging to the developer's CDP Project.
The response is paginated, and by default, returns 20 accounts per page.
 * @summary List EVM accounts
 */
export const listEvmAccounts = (
  params?: ListEvmAccountsParams,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<ListEvmAccounts200>(
    { url: `/v2/evm/accounts`, method: "GET", params },
    options,
  );
};
/**
 * Creates a new EVM account.
 * @summary Create an EVM account
 */
export const createEvmAccount = (
  createEvmAccountBody?: CreateEvmAccountBody,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<EvmAccount>(
    {
      url: `/v2/evm/accounts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEvmAccountBody,
    },
    options,
  );
};
/**
 * Gets an EVM account by its address.
 * @summary Get an EVM account by address
 */
export const getEvmAccount = (address: string, options?: SecondParameter<typeof cdpApiClient>) => {
  return cdpApiClient<EvmAccount>({ url: `/v2/evm/accounts/${address}`, method: "GET" }, options);
};
/**
 * Gets an EVM account by its name.
 * @summary Get an EVM account by name
 */
export const getEvmAccountByName = (
  name: string,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<EvmAccount>(
    { url: `/v2/evm/accounts/by-name/${name}`, method: "GET" },
    options,
  );
};
/**
 * Signs a transaction with the given EVM account.
The transaction should be serialized as a hex string using [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).

The transaction must be an [EIP-1559 dynamic fee transaction](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). The developer is responsible for ensuring that the unsigned transaction is valid, as the API will not validate the transaction.
 * @summary Sign a transaction
 */
export const signEvmTransaction = (
  address: string,
  signEvmTransactionBody: SignEvmTransactionBody,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<SignEvmTransaction200>(
    {
      url: `/v2/evm/accounts/${address}/sign/transaction`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signEvmTransactionBody,
    },
    options,
  );
};
/**
 * Signs an arbitrary 32 byte hash with the given EVM account.


**WARNING: This API will likely be deprecated in the future.** It is recommended not to depend on it. Never sign a hash that you didn't generate, as it can be an arbitrary transaction. For example, it might send all of your funds to an attacker.
 * @summary Sign a hash
 */
export const signEvmHash = (
  address: string,
  signEvmHashBody: SignEvmHashBody,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<SignEvmHash200>(
    {
      url: `/v2/evm/accounts/${address}/sign`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signEvmHashBody,
    },
    options,
  );
};
/**
 * Signs an [EIP-191](https://eips.ethereum.org/EIPS/eip-191) message with the given EVM account.

Per the specification, the message in the request body is prepended with `0x19 <0x45 (E)> <thereum Signed Message:\n" + len(message)>` before being signed.
 * @summary Sign an EIP-191 message
 */
export const signEvmMessage = (
  address: string,
  signEvmMessageBody: SignEvmMessageBody,
  options?: SecondParameter<typeof cdpApiClient>,
) => {
  return cdpApiClient<SignEvmMessage200>(
    {
      url: `/v2/evm/accounts/${address}/sign/message`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signEvmMessageBody,
    },
    options,
  );
};
export type ListEvmAccountsResult = NonNullable<Awaited<ReturnType<typeof listEvmAccounts>>>;
export type CreateEvmAccountResult = NonNullable<Awaited<ReturnType<typeof createEvmAccount>>>;
export type GetEvmAccountResult = NonNullable<Awaited<ReturnType<typeof getEvmAccount>>>;
export type GetEvmAccountByNameResult = NonNullable<
  Awaited<ReturnType<typeof getEvmAccountByName>>
>;
export type SignEvmTransactionResult = NonNullable<Awaited<ReturnType<typeof signEvmTransaction>>>;
export type SignEvmHashResult = NonNullable<Awaited<ReturnType<typeof signEvmHash>>>;
export type SignEvmMessageResult = NonNullable<Awaited<ReturnType<typeof signEvmMessage>>>;
