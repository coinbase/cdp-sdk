/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { X402Version } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
import type { X402DiscoveryResourcesResponse } from "../coinbaseDeveloperPlatformAPIs.schemas.js";

export const getListX402DiscoveryResourcesResponseMock = (
  overrideResponse: Partial<X402DiscoveryResourcesResponse> = {},
): X402DiscoveryResourcesResponse => ({
  x402Version: faker.helpers.arrayElement(Object.values(X402Version)),
  items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    resource: faker.string.alpha(20),
    type: faker.helpers.arrayElement(["http"] as const),
    x402Version: faker.helpers.arrayElement(Object.values(X402Version)),
    accepts: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        scheme: faker.helpers.arrayElement(["exact"] as const),
        network: faker.helpers.arrayElement(["base-sepolia", "base"] as const),
        maxAmountRequired: faker.string.alpha(20),
        resource: faker.string.alpha(20),
        description: faker.string.alpha(20),
        mimeType: faker.string.alpha(20),
        outputSchema: faker.helpers.arrayElement([{}, undefined]),
        payTo: faker.helpers.fromRegExp(
          "^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$",
        ),
        maxTimeoutSeconds: faker.number.int({ min: undefined, max: undefined }),
        asset: faker.helpers.fromRegExp(
          "^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$",
        ),
        extra: faker.helpers.arrayElement([{}, undefined]),
      })),
      undefined,
    ]),
    lastUpdated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    metadata: faker.helpers.arrayElement([{}, undefined]),
  })),
  pagination: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    offset: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getListX402DiscoveryResourcesMockHandler = (
  overrideResponse?:
    | X402DiscoveryResourcesResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<X402DiscoveryResourcesResponse> | X402DiscoveryResourcesResponse),
) => {
  return http.get("*/v2/x402/discovery/resources", async info => {
    await delay(0);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListX402DiscoveryResourcesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getX402FacilitatorMock = () => [getListX402DiscoveryResourcesMockHandler()];
