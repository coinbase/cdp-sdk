# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

<<<<<<<< HEAD:python/cdp/openapi_client/models/spend_permission_response_object.py
from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cdp.openapi_client.models.spend_permission import SpendPermission
from typing import Optional, Set
from typing_extensions import Self

class SpendPermissionResponseObject(BaseModel):
    """
    SpendPermissionResponseObject
    """ # noqa: E501
    permission: Optional[SpendPermission] = None
    permission_hash: Optional[StrictStr] = Field(default=None, description="Unique hash identifier for this permission.", alias="permissionHash")
    revoked: Optional[StrictBool] = Field(default=None, description="Whether this permission has been revoked.")
    revoked_at: Optional[datetime] = Field(default=None, description="The UTC ISO 8601 timestamp when the permission was revoked (if applicable).", alias="revokedAt")
    created_at: Optional[datetime] = Field(default=None, description="The UTC ISO 8601 timestamp when the permission was created.", alias="createdAt")
    __properties: ClassVar[List[str]] = ["permission", "permissionHash", "revoked", "revokedAt", "createdAt"]
========
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OnchainDataResultSchemaColumnsInner(BaseModel):
    """
    OnchainDataResultSchemaColumnsInner
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Column name.")
    type: Optional[StrictStr] = Field(default=None, description="Column data type (ClickHouse types).")
    __properties: ClassVar[List[str]] = ["name", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['String', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'UInt128', 'UInt256', 'Int8', 'Int16', 'Int32', 'Int64', 'Int128', 'Int256', 'Float32', 'Float64', 'Bool', 'Date', 'DateTime', 'DateTime64', 'UUID']):
            raise ValueError("must be one of enum values ('String', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'UInt128', 'UInt256', 'Int8', 'Int16', 'Int32', 'Int64', 'Int128', 'Int256', 'Float32', 'Float64', 'Bool', 'Date', 'DateTime', 'DateTime64', 'UUID')")
        return value
>>>>>>>> 6563448cfa934a64d92122e7d3bea9e46973cbc1:python/cdp/openapi_client/models/onchain_data_result_schema_columns_inner.py

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
<<<<<<<< HEAD:python/cdp/openapi_client/models/spend_permission_response_object.py
        """Create an instance of SpendPermissionResponseObject from a JSON string"""
========
        """Create an instance of OnchainDataResultSchemaColumnsInner from a JSON string"""
>>>>>>>> 6563448cfa934a64d92122e7d3bea9e46973cbc1:python/cdp/openapi_client/models/onchain_data_result_schema_columns_inner.py
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
<<<<<<<< HEAD:python/cdp/openapi_client/models/spend_permission_response_object.py
        # override the default output from pydantic by calling `to_dict()` of permission
        if self.permission:
            _dict['permission'] = self.permission.to_dict()
========
>>>>>>>> 6563448cfa934a64d92122e7d3bea9e46973cbc1:python/cdp/openapi_client/models/onchain_data_result_schema_columns_inner.py
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
<<<<<<<< HEAD:python/cdp/openapi_client/models/spend_permission_response_object.py
        """Create an instance of SpendPermissionResponseObject from a dict"""
========
        """Create an instance of OnchainDataResultSchemaColumnsInner from a dict"""
>>>>>>>> 6563448cfa934a64d92122e7d3bea9e46973cbc1:python/cdp/openapi_client/models/onchain_data_result_schema_columns_inner.py
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
<<<<<<<< HEAD:python/cdp/openapi_client/models/spend_permission_response_object.py
            "permission": SpendPermission.from_dict(obj["permission"]) if obj.get("permission") is not None else None,
            "permissionHash": obj.get("permissionHash"),
            "revoked": obj.get("revoked"),
            "revokedAt": obj.get("revokedAt"),
            "createdAt": obj.get("createdAt")
========
            "name": obj.get("name"),
            "type": obj.get("type")
>>>>>>>> 6563448cfa934a64d92122e7d3bea9e46973cbc1:python/cdp/openapi_client/models/onchain_data_result_schema_columns_inner.py
        })
        return _obj


