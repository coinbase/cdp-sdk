# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cdp.openapi_client.models.x402_payment_requirements import X402PaymentRequirements
from cdp.openapi_client.models.x402_version import X402Version
from typing import Optional, Set
from typing_extensions import Self

class X402DiscoveryResource(BaseModel):
    """
    A single discovered x402 resource.
    """ # noqa: E501
    resource: StrictStr = Field(description="The normalized resource identifier.")
    type: StrictStr = Field(description="Communication protocol (e.g., \"http\", \"mcp\").")
    x402_version: X402Version = Field(alias="x402Version")
    accepts: Optional[List[X402PaymentRequirements]] = Field(default=None, description="Payment requirements as an array of JSON objects.")
    last_updated: datetime = Field(description="Timestamp of the last update.", alias="lastUpdated")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata as a JSON object.")
    __properties: ClassVar[List[str]] = ["resource", "type", "x402Version", "accepts", "lastUpdated", "metadata"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http']):
            raise ValueError("must be one of enum values ('http')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X402DiscoveryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accepts (list)
        _items = []
        if self.accepts:
            for _item_accepts in self.accepts:
                if _item_accepts:
                    _items.append(_item_accepts.to_dict())
            _dict['accepts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X402DiscoveryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource": obj.get("resource"),
            "type": obj.get("type"),
            "x402Version": obj.get("x402Version"),
            "accepts": [X402PaymentRequirements.from_dict(_item) for _item in obj["accepts"]] if obj.get("accepts") is not None else None,
            "lastUpdated": obj.get("lastUpdated"),
            "metadata": obj.get("metadata")
        })
        return _obj


